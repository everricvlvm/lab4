.. lab4 documentation master file, created by
   sphinx-quickstart on Wed May 23 22:09:07 2018.
   You can adapt this file completely to your liking, but it should at least
   contain the root `toctree` directive.

Работа №4. Системные вызовы, процессы, компиляция программ
==========================================================

Цели
^^^^
1) Приобретение навыков по управлению процессами.
2) Изучение системного вызова fork().
3) Приобретение навыков написания и трансляции системного ПО на языке C.
4) Изучение утилиты make и её использование для трансляции программ на языке C.
5) Использование удалённых серверов для трансляции приложений.
6) Изучение Docker и базового взаимодействия с ним.
7) Изучение способов нестандартного представления информации.

Процесс
^^^^^^^

Начало работы было положено выбором основной платформы для Docker, коей стала -- Alpine, будучи выбранной из предложенных преподавателем: RancherOS, Ubuntu и Alpine. Главным критерием данного выбора оказался компактный размер этой системы, а также интерес к неизведанному. ::

    docker run -it alpine:latest

.. Работа происходила на особой версии хоста kali для vbox, где был только root-пользователь.

Далее производится начальная настройка системы.
Обновление::

    apk update && apk upgrade
	
Установка рабочих программ::

    apk add nano make gcc build-base openssh

Создание каталога work и скачивание в него рабочих файлов::

	mkdir work
	scp -r -P 6666 student@openit.guap.ru:/container/ABC-Linux/lab4/* work/
	cd work

Теперь, после изучения полученных файлов, стало понятно, что Makefile имеет стандартную ошибку для системы make, а именно -- пробелы вместо табуляции перед командами. А оснавная логическая ошибка в lab4.c. 

Она представляет собой моментальное сравнение системного вызова fork() с числом вместо сравнения переменной, 
которой присвоено значение этого вызова
Эту ошибку можно и нужно исправить следующим образом:

.. figure:: https://github.com/everricvlvm/lab4/blob/master/source/_static/2.PNG?raw=true
       :scale: 100 %
       :align: center

       А вот так правильно 


После исправления данных ошибок программа стала корректно работать во всем
и выдавать правильные значения (*pid*, *ppid*) для дочернего и родительского процессов... кроме *ppid* дочернего процесса -
он был как у родительского и равен 1, что, естественно, неправильно.
Данная проблема была проанализирована, и были выведены следующие выводы:

1) *pid* = 1 означает процесс *init*, 1й процесс системы
2) раз *ppid* = 1, значит, у данного процесса нет родительского
3) раз у данного процесса нет родительского, значит, родительский процесс завершается раньше дочернего
4) раз родительский процесс завершается раньше дочернего, значит его необходимо задержать

Было принято решение в родительском процессе использовать команду sleep():

.. figure:: https://github.com/everricvlvm/lab4/blob/master/source/_static/3.PNG?raw=true
       :scale: 100 %
       :align: center

       Решение проблемы *ppid* = 1 

Итак, программа работает, осталось лишь собрать ее из нашего Makefile:

.. figure:: https://github.com/everricvlvm/lab4/blob/master/source/_static/4.PNG?raw=true
       :scale: 100 %
       :align: center

       Внешний вид Makefile 

Мы делаем команды ::

		make && make install && make clean
		
И запускаем нашу программу из папки bin:

.. figure:: https://github.com/everricvlvm/lab4/blob/master/source/_static/5.PNG?raw=true
       :scale: 100 %
       :align: center

       Вывод программы
	   
Ну вот и всё, осталось лишь сохранить результаты, для этого переходим в другой терминал и сначала ищем наш рабочий контейнер::

	docker ps

В колонке ContainerID имя нашего контейнера, вводим его в команде ::
 
	docker commit *имя нашего контейнера* *имя каталога куда*

Для меня данная команда выглядит так:

.. figure:: https://github.com/everricvlvm/labs/blob/master/_static/6.PNG?raw=true
       :scale: 100 %
       :align: center

       Сохранение Docker-контейнера
	   
Получить и проверить итоговый контейнер можно по команде::

	docker run -it everricvlvm/lb4
	   
Выводы 
^^^^^^

Были исследованы процессы, системный вызов fork(), работа с Docker. Изучено взаимодействие удалённых сервисов меж собой, и как итог произведён данный отчёт на основе сетевых методик.
	   
.. toctree::
   :maxdepth: 2
   :caption: Contents:


