.. lab4 documentation master file, created by
   sphinx-quickstart on Wed May 23 22:09:07 2018.
   You can adapt this file completely to your liking, but it should at least
   contain the root `toctree` directive.

Работа №4. Системные вызовы, процессы, компиляция программ
==========================================================

Цели
^^^^
1) Приобретение навыков по управлению процессами.
2) Изучение системного вызова fork().
3) Приобретение навыков написания и трансляции системного ПО на языке C.
4) Изучение утилиты make и её использование для трансляции программ на языке C.
5) Использование удалённых серверов для трансляции приложений.
6) Изучение Docker и базовое взаимодействие с ним
7) Изучение способов представления информации помимо стандартных

Процесс
^^^^^^^

Для начала было необходимо выбрать основную платформу для Docker, 2 были предложены преподавателем -- Alpine и RancherOS, 
и стандартная Ubuntu. В ходе апробации данных систем выяснилось, что, несмотря на своё удобство и компактность, предложенные системы 
не удовлетворяют требованиям, в силу своей же компактности, так как на обеих системах в стандартном пакете gcc не присутствуют
статические библиотеки, а, следовательно, была выбрана старая добрая Ubuntu 16.04 ::

    sudo docker run -it ubuntu:latest

.. Для облегчения работы с Docker я добавил его в группу исключений sudo
   sudo usermod -a -G docker pavel


Обновление установщика::

    apt-get update
	apt-get upgrade
	

Затем было необходимо поставить базовые программы::

    apt-get install nano
	apt-get install gcc
	apt-get install openssh

Создаем каталог work и переходим в него::

	mkdir work
	cd work
	
Копируем файлы с удаленного сервера::

	scp -r -P 6666 student@openit.guap.ru:/container/ABC-Linux/lab4/* work/

Далее мы начинаем работать уже с полученными файлами
В большинстве файлов были допущены лишь незначительные ошибки типа пробелов вместо табуляции, которые, однако 
не позволяли корректно запустить программу
но в файле lab4.c была допущена критическая логическая ошибка:

.. figure:: https://github.com/Yohitman/labs/blob/master/_static/1.PNG?raw=true
       :scale: 100 %
       :align: center

       Вот как неправильно
	   
	   (слово ошибка намекает)

Она представляет собой моментальное сравнение системного вызова fork() с числом вместо сравнения переменной, 
которой присвоено значение этого вызова
Эту ошибку можно и нужно исправить следующим образом:

.. figure:: https://github.com/Yohitman/labs/blob/master/_static/2.PNG?raw=true
       :scale: 100 %
       :align: center

       А вот так правильно 


После исправления данных ошибок программа стала корректно работать во всем
и выдавать правильные значения (*pid*, *ppid*) для дочернего и родительского процессов... кроме *ppid* дочернего процесса -
он был как у родительского и равен 1, что, естественно, неправильно.
Данная проблема была проанализирована, и были выведены следующие выводы:

1) *pid* = 1 означает процесс *init*, 1й процесс системы
2) раз *ppid* = 1, значит, у данного процесса нет родительского
3) раз у данного процесса нет родительского, значит, родительский процесс завершается раньше дочернего
4) раз родительский процесс завершается раньше дочернего, значит его необходимо задержать

Было принято решение в родительском процессе использовать команду sleep():

.. figure:: https://github.com/Yohitman/labs/blob/master/_static/3.PNG?raw=true
       :scale: 100 %
       :align: center

       Решение проблемы *ppid* = 1 

Итак, программа работает, осталось лишь собрать ее из нашего Makefile:

.. figure:: https://github.com/Yohitman/labs/blob/master/_static/4.PNG?raw=true
       :scale: 100 %
       :align: center

       Внешний вид Makefile 

Мы делаем команды ::

		make
		
		make install
		
		make clean
		
И запускаем нашу программу из папки bin:

.. figure:: https://github.com/Yohitman/labs/blob/master/_static/5.PNG?raw=true
       :scale: 100 %
       :align: center

       Вывод программы
	   
Ну вот и всё, осталось лишь сохранить результаты, для этого переходим в другой терминал и сначала ищем наш рабочий контейнер::

	docker ps

В колонке ContainerID имя нашего контейнера, вводим его в команде ::
 
	docker commit *имя нашего контейнера* *имя каталога куда*

Для меня данная команда выглядит так:

.. figure:: https://github.com/Yohitman/labs/blob/master/_static/6.PNG?raw=true
       :scale: 100 %
       :align: center

       Сохранение Docker-контейнера
	   
Загрузить данный контейнер можно по команде::

	docker run konstantinov/abc-linux-4-1
	   
Выводы 
^^^^^^

Были исследованы процессы и системный вызов fork(), был рассмотрен процесс создания каталогов и программы, изучено взаимодействие
с Docker, а также данный отчет был сделан при помощи средств удаленного документирования.
	   
.. toctree::
   :maxdepth: 2
   :caption: Contents:


